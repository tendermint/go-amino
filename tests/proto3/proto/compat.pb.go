// Code generated by protoc-gen-go. DO NOT EDIT.
// source: compat.proto

/*
Package proto3tests is a generated protocol buffer package.

It is generated from these files:
	compat.proto

It has these top-level messages:
	TestInt32Varint
	TestInt32Fixed
	Test32
	TestFixedInt64
*/
package proto3tests

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestInt32Varint struct {
	// protobuf will encode this as varint
	Int32 int32 `protobuf:"varint,1,opt,name=Int32" json:"Int32,omitempty"`
}

func (m *TestInt32Varint) Reset()                    { *m = TestInt32Varint{} }
func (m *TestInt32Varint) String() string            { return proto.CompactTextString(m) }
func (*TestInt32Varint) ProtoMessage()               {}
func (*TestInt32Varint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestInt32Varint) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

type TestInt32Fixed struct {
	Fixed32 uint32 `protobuf:"fixed32,1,opt,name=Fixed32" json:"Fixed32,omitempty"`
}

func (m *TestInt32Fixed) Reset()                    { *m = TestInt32Fixed{} }
func (m *TestInt32Fixed) String() string            { return proto.CompactTextString(m) }
func (*TestInt32Fixed) ProtoMessage()               {}
func (*TestInt32Fixed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestInt32Fixed) GetFixed32() uint32 {
	if m != nil {
		return m.Fixed32
	}
	return 0
}

type Test32 struct {
	Foo uint32 `protobuf:"fixed32,1,opt,name=foo" json:"foo,omitempty"`
	Bar int32  `protobuf:"varint,2,opt,name=bar" json:"bar,omitempty"`
}

func (m *Test32) Reset()                    { *m = Test32{} }
func (m *Test32) String() string            { return proto.CompactTextString(m) }
func (*Test32) ProtoMessage()               {}
func (*Test32) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Test32) GetFoo() uint32 {
	if m != nil {
		return m.Foo
	}
	return 0
}

func (m *Test32) GetBar() int32 {
	if m != nil {
		return m.Bar
	}
	return 0
}

type TestFixedInt64 struct {
	Int64 uint64 `protobuf:"fixed64,1,opt,name=Int64" json:"Int64,omitempty"`
}

func (m *TestFixedInt64) Reset()                    { *m = TestFixedInt64{} }
func (m *TestFixedInt64) String() string            { return proto.CompactTextString(m) }
func (*TestFixedInt64) ProtoMessage()               {}
func (*TestFixedInt64) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *TestFixedInt64) GetInt64() uint64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func init() {
	proto.RegisterType((*TestInt32Varint)(nil), "proto3tests.TestInt32Varint")
	proto.RegisterType((*TestInt32Fixed)(nil), "proto3tests.TestInt32Fixed")
	proto.RegisterType((*Test32)(nil), "proto3tests.Test32")
	proto.RegisterType((*TestFixedInt64)(nil), "proto3tests.TestFixedInt64")
}

func init() { proto.RegisterFile("compat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0x2d,
	0x48, 0x2c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x06, 0x53, 0xc6, 0x25, 0xa9, 0xc5,
	0x25, 0xc5, 0x4a, 0xea, 0x5c, 0xfc, 0x21, 0xa9, 0xc5, 0x25, 0x9e, 0x79, 0x25, 0xc6, 0x46, 0x61,
	0x89, 0x45, 0x99, 0x79, 0x25, 0x42, 0x22, 0x5c, 0xac, 0x60, 0xae, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x6b, 0x10, 0x84, 0xa3, 0xa4, 0xc5, 0xc5, 0x07, 0x57, 0xe8, 0x96, 0x59, 0x91, 0x9a, 0x22, 0x24,
	0xc1, 0xc5, 0x0e, 0x66, 0x40, 0x55, 0xb2, 0x07, 0xc1, 0xb8, 0x4a, 0x3a, 0x5c, 0x6c, 0x20, 0xb5,
	0xc6, 0x46, 0x42, 0x02, 0x5c, 0xcc, 0x69, 0xf9, 0xf9, 0x50, 0x79, 0x10, 0x13, 0x24, 0x92, 0x94,
	0x58, 0x24, 0xc1, 0x04, 0x36, 0x1b, 0xc4, 0x54, 0x52, 0x83, 0x98, 0x0c, 0xd6, 0xec, 0x99, 0x57,
	0x62, 0x66, 0x02, 0x75, 0x81, 0x99, 0x09, 0x58, 0x1f, 0x5b, 0x10, 0x84, 0x93, 0xc4, 0x06, 0x71,
	0x37, 0x20, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x21, 0xed, 0x8d, 0xce, 0x00, 0x00, 0x00,
}
